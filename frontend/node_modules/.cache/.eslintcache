[{"C:\\Users\\Lutfi\\Desktop\\Project\\Graduation_Project\\frontend\\src\\index.js":"1","C:\\Users\\Lutfi\\Desktop\\Project\\Graduation_Project\\frontend\\src\\App.js":"2","C:\\Users\\Lutfi\\Desktop\\Project\\Graduation_Project\\frontend\\src\\reportWebVitals.js":"3","C:\\Users\\Lutfi\\Desktop\\Project\\Graduation_Project\\frontend\\src\\components\\Header.js":"4","C:\\Users\\Lutfi\\Desktop\\Project\\Graduation_Project\\frontend\\src\\components\\Footer.js":"5","C:\\Users\\Lutfi\\Desktop\\Project\\Graduation_Project\\frontend\\src\\screens\\HomeScreen.js":"6","C:\\Users\\Lutfi\\Desktop\\Project\\Graduation_Project\\frontend\\src\\screens\\ProductSreen.js":"7","C:\\Users\\Lutfi\\Desktop\\Project\\Graduation_Project\\frontend\\src\\components\\Product.js":"8","C:\\Users\\Lutfi\\Desktop\\Project\\Graduation_Project\\frontend\\src\\components\\Rating.js":"9","C:\\Users\\Lutfi\\Desktop\\Project\\Graduation_Project\\frontend\\src\\screens\\CartScreen.js":"10","C:\\Users\\Lutfi\\Desktop\\Project\\Graduation_Project\\frontend\\src\\screens\\LoginScreen.js":"11","C:\\Users\\Lutfi\\Desktop\\Project\\Graduation_Project\\frontend\\src\\screens\\UserProfile.js":"12","C:\\Users\\Lutfi\\Desktop\\Project\\Graduation_Project\\frontend\\src\\screens\\RegisterScreen.js":"13","C:\\Users\\Lutfi\\Desktop\\Project\\Graduation_Project\\frontend\\src\\components\\StepChecker.js":"14","C:\\Users\\Lutfi\\Desktop\\Project\\Graduation_Project\\frontend\\src\\screens\\PaymentScreen.js":"15","C:\\Users\\Lutfi\\Desktop\\Project\\Graduation_Project\\frontend\\src\\screens\\ShippingAddressScreen.js":"16","C:\\Users\\Lutfi\\Desktop\\Project\\Graduation_Project\\frontend\\src\\screens\\CheckOutScreen.js":"17","C:\\Users\\Lutfi\\Desktop\\Project\\Graduation_Project\\frontend\\src\\screens\\OrderDetailScreen.js":"18"},{"size":368,"mtime":1653596479900,"results":"19","hashOfConfig":"20"},{"size":5009,"mtime":1654861115843,"results":"21","hashOfConfig":"20"},{"size":375,"mtime":1651497678502,"results":"22","hashOfConfig":"20"},{"size":3242,"mtime":1654614923981,"results":"23","hashOfConfig":"20"},{"size":502,"mtime":1654601581946,"results":"24","hashOfConfig":"20"},{"size":999,"mtime":1654452067424,"results":"25","hashOfConfig":"20"},{"size":5719,"mtime":1654434534786,"results":"26","hashOfConfig":"20"},{"size":1427,"mtime":1654451860409,"results":"27","hashOfConfig":"20"},{"size":597,"mtime":1654451892383,"results":"28","hashOfConfig":"20"},{"size":3984,"mtime":1654864737976,"results":"29","hashOfConfig":"20"},{"size":3987,"mtime":1654617791135,"results":"30","hashOfConfig":"20"},{"size":9022,"mtime":1654861017046,"results":"31","hashOfConfig":"20"},{"size":4656,"mtime":1654434340615,"results":"32","hashOfConfig":"20"},{"size":1267,"mtime":1654721947919,"results":"33","hashOfConfig":"20"},{"size":8382,"mtime":1654795072075,"results":"34","hashOfConfig":"20"},{"size":4580,"mtime":1654722099311,"results":"35","hashOfConfig":"20"},{"size":4549,"mtime":1654811587554,"results":"36","hashOfConfig":"20"},{"size":6218,"mtime":1654863826862,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},"wv99qn",{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"41"},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"41"},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"41"},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Lutfi\\Desktop\\Project\\Graduation_Project\\frontend\\src\\index.js",[],[],["96","97"],"C:\\Users\\Lutfi\\Desktop\\Project\\Graduation_Project\\frontend\\src\\App.js",[],[],"C:\\Users\\Lutfi\\Desktop\\Project\\Graduation_Project\\frontend\\src\\reportWebVitals.js",[],[],"C:\\Users\\Lutfi\\Desktop\\Project\\Graduation_Project\\frontend\\src\\components\\Header.js",[],[],"C:\\Users\\Lutfi\\Desktop\\Project\\Graduation_Project\\frontend\\src\\components\\Footer.js",[],[],"C:\\Users\\Lutfi\\Desktop\\Project\\Graduation_Project\\frontend\\src\\screens\\HomeScreen.js",[],[],"C:\\Users\\Lutfi\\Desktop\\Project\\Graduation_Project\\frontend\\src\\screens\\ProductSreen.js",[],[],"C:\\Users\\Lutfi\\Desktop\\Project\\Graduation_Project\\frontend\\src\\components\\Product.js",[],[],"C:\\Users\\Lutfi\\Desktop\\Project\\Graduation_Project\\frontend\\src\\components\\Rating.js",[],[],"C:\\Users\\Lutfi\\Desktop\\Project\\Graduation_Project\\frontend\\src\\screens\\CartScreen.js",[],[],"C:\\Users\\Lutfi\\Desktop\\Project\\Graduation_Project\\frontend\\src\\screens\\LoginScreen.js",[],[],"C:\\Users\\Lutfi\\Desktop\\Project\\Graduation_Project\\frontend\\src\\screens\\UserProfile.js",["98","99"],[],"C:\\Users\\Lutfi\\Desktop\\Project\\Graduation_Project\\frontend\\src\\screens\\RegisterScreen.js",[],[],"C:\\Users\\Lutfi\\Desktop\\Project\\Graduation_Project\\frontend\\src\\components\\StepChecker.js",[],[],"C:\\Users\\Lutfi\\Desktop\\Project\\Graduation_Project\\frontend\\src\\screens\\PaymentScreen.js",["100","101"],[],"import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport {\r\n  Form,\r\n  Button,\r\n  Card,\r\n  Container,\r\n  ListGroup,\r\n  ListGroupItem,\r\n  FormGroup,\r\n  Row,\r\n  Col,\r\n} from \"react-bootstrap\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport StepChecker from \"../components/StepChecker\";\r\n\r\nconst PaymentScreen = ({ cart, price }) => {\r\n  const navigate = useNavigate();\r\n  const [paymentMethod, setPaymentMethod] = useState(\"CreditCard\");\r\n  const [isSuccess, setIsSuccess] = useState(\"\");\r\n  const [order, setOrder] = useState(\"\");\r\n\r\n  const shippingPrice = 5;\r\n  const totalPrice = Number(price) + shippingPrice;\r\n  const shoppingCart = cart;\r\n  const itemsPrice = price;\r\n  const shippingAddress = JSON.parse(localStorage.getItem(\"shippingAddress\"));\r\n\r\n  const userInfo = JSON.parse(localStorage.getItem(\"user\"));\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    localStorage.setItem(\"paymentMethod\", JSON.stringify(paymentMethod));\r\n\r\n    let config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        authorization: `Bearer ${userInfo.token}`,\r\n      },\r\n    };\r\n    let data = {\r\n      orderItems: shoppingCart,\r\n      shippingAddress: shippingAddress,\r\n      paymentMethod: paymentMethod,\r\n      itemsPrice: itemsPrice,\r\n      shippingPrice: shippingPrice,\r\n      totalPrice: totalPrice,\r\n    };\r\n    await axios\r\n      .post(\"/api/orders\", data, config)\r\n      .then(() => setIsSuccess(\"success\"))\r\n      .catch((error) => setIsSuccess(error));\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isSuccess === \"success\") {\r\n      let config = {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          authorization: `Bearer ${userInfo.token}`,\r\n        },\r\n      };\r\n      const fetchOrder = async () => {\r\n        const { data } = await axios.get(\"/api/orders\", config);\r\n\r\n        setOrder(data);\r\n        const lastOrder = data.length - 1;\r\n        let navigateAddress = data[lastOrder]._id;\r\n        navigate(`/orders/${navigateAddress}`);\r\n      };\r\n      fetchOrder();\r\n    } else {\r\n      console.log(isSuccess);\r\n    }\r\n  }, [isSuccess]);\r\n  return (\r\n    <>\r\n      <Container style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n        <ListGroup>\r\n          <ListGroupItem>\r\n            <StepChecker signIn shippingAddress overview />\r\n          </ListGroupItem>\r\n        </ListGroup>\r\n      </Container>\r\n\r\n      <Card\r\n        style={{ width: \"55%\", height: \"63vh\" }}\r\n        className=\"m-auto p-3 rounded\"\r\n      >\r\n        {!localStorage.getItem(\"user\") ? (\r\n          navigate(\"/users/login?redirect=address\")\r\n        ) : (\r\n          <Card.Body className=\"pb-0\" style={{ paddingTop: \"1rem\" }}>\r\n            <Row>\r\n              <Col\r\n                style={{\r\n                  display: \"flex\",\r\n                  marginBottom: \"1rem\",\r\n                  justifyContent: \"flex-start\",\r\n                }}\r\n              >\r\n                <ListGroup>\r\n                  <ListGroupItem>\r\n                    <Card.Text\r\n                      style={{ fontSize: \"1.5rem\", textAlign: \"center\" }}\r\n                    >\r\n                      Shipping Details\r\n                    </Card.Text>\r\n                    <hr></hr>\r\n                    <Card.Text>Name-Surname: {userInfo.name}</Card.Text>\r\n                    <Card.Text>\r\n                      Province/District: {shippingAddress.city}/\r\n                      {shippingAddress.district}{\" \"}\r\n                    </Card.Text>\r\n                    <Card.Text>\r\n                      Street: {shippingAddress.street} &nbsp; Postal Code:\r\n                      {shippingAddress.postalCode}\r\n                    </Card.Text>\r\n                    <Card.Text>\r\n                      Building name/number: {shippingAddress.fullAddress}\r\n                    </Card.Text>\r\n                    <Card.Text>\r\n                      Contact Number: {shippingAddress.contactNumber}\r\n                    </Card.Text>\r\n                  </ListGroupItem>\r\n                </ListGroup>\r\n              </Col>\r\n              <Col>\r\n                <ListGroup>\r\n                  <ListGroupItem>\r\n                    <Card.Text\r\n                      style={{ fontSize: \"1.5rem\", textAlign: \"center\" }}\r\n                    >\r\n                      My Cart\r\n                    </Card.Text>\r\n                    <hr></hr>\r\n                    {cart.map((item, index) => (\r\n                      <Row key={index}>\r\n                        <Col\r\n                          className=\"items2\"\r\n                          style={{\r\n                            display: \"flex\",\r\n                            marginBottom: \"0.5rem\",\r\n                          }}\r\n                        >\r\n                          <Card.Img\r\n                            src={item.image}\r\n                            style={{ width: \"40px\", height: \"40px\" }}\r\n                          />\r\n                          <Card.Text\r\n                            style={{\r\n                              paddingLeft: \"0.5rem\",\r\n                            }}\r\n                          >\r\n                            <strong> {item.name} </strong>(\r\n                            {item.defaultCartStock} * {item.price}₺ ={\" \"}\r\n                            {(item.defaultCartStock * item.price).toFixed(2)}₺)\r\n                          </Card.Text>\r\n                        </Col>\r\n                        <hr></hr>\r\n                      </Row>\r\n                    ))}\r\n                  </ListGroupItem>\r\n                </ListGroup>\r\n              </Col>\r\n              <Col\r\n                style={{\r\n                  width: \"20rem\",\r\n                  display: \"flex\",\r\n                  marginBottom: \"1rem\",\r\n                  justifyContent: \"flex-end\",\r\n                }}\r\n              >\r\n                <ListGroup>\r\n                  <ListGroup.Item>\r\n                    <Card.Text\r\n                      style={{ fontSize: \"2rem\", textAlign: \"center\" }}\r\n                    >\r\n                      Order Summary\r\n                    </Card.Text>\r\n                    <hr></hr>\r\n\r\n                    <br></br>\r\n\r\n                    <Card.Text\r\n                      style={{ display: \"flex\", justifyContent: \"flex-end\" }}\r\n                    >\r\n                      Product Price: {price}₺\r\n                    </Card.Text>\r\n\r\n                    <Card.Text\r\n                      style={{ display: \"flex\", justifyContent: \"flex-end\" }}\r\n                    >\r\n                      Shipping Price: 5₺\r\n                    </Card.Text>\r\n                    <hr></hr>\r\n                    <Card.Text\r\n                      style={{ display: \"flex\", justifyContent: \"flex-end\" }}\r\n                    >\r\n                      Total Price:&nbsp; <strong> {totalPrice}₺</strong>\r\n                    </Card.Text>\r\n                  </ListGroup.Item>\r\n                </ListGroup>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\r\n                <Form onSubmit={handleSubmit}>\r\n                  <Row>\r\n                    <Col>\r\n                      <FormGroup>\r\n                        <Form.Label as=\"legend\">Payment Method</Form.Label>\r\n                        <Form.Check\r\n                          checked\r\n                          type=\"radio\"\r\n                          label=\"Credit Card\"\r\n                          name=\"paymentMethod\"\r\n                          value=\"CreditCard\"\r\n                          onChange={(e) => setPaymentMethod(e.target.value)}\r\n                        ></Form.Check>\r\n                        <Form.Check\r\n                          type=\"radio\"\r\n                          label=\"Cash\"\r\n                          name=\"paymentMethod\"\r\n                          value=\"Cash\"\r\n                          onChange={(e) => setPaymentMethod(e.target.value)}\r\n                        ></Form.Check>\r\n                      </FormGroup>\r\n                    </Col>\r\n                  </Row>\r\n\r\n                  <Button type=\"submit\" style={{ marginLeft: \"7rem\" }}>\r\n                    Continue\r\n                  </Button>\r\n                </Form>\r\n              </Col>\r\n            </Row>\r\n          </Card.Body>\r\n        )}\r\n      </Card>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PaymentScreen;\r\n","C:\\Users\\Lutfi\\Desktop\\Project\\Graduation_Project\\frontend\\src\\screens\\ShippingAddressScreen.js",["102"],[],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Form,\r\n  Button,\r\n  Card,\r\n  Alert,\r\n  Container,\r\n  ListGroup,\r\n  ListGroupItem,\r\n} from \"react-bootstrap\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport StepChecker from \"../components/StepChecker\";\r\nconst ShippingAddressScreen = () => {\r\n  const [fullAddress, setFullAddress] = useState(\"\");\r\n  const [city, setCity] = useState(\"\");\r\n  const [district, setDistrict] = useState(\"\");\r\n  const [street, setStreet] = useState(\"\");\r\n  const [postalCode, setPostalCode] = useState(\"\");\r\n  const [shippingAddress, setShippingAddress] = useState(\"\");\r\n  const [contactNumber, setContactNumber] = useState(\"\");\r\n  const navigate = useNavigate();\r\n  const handleOrder = (event) => {\r\n    event.preventDefault();\r\n    setShippingAddress({\r\n      fullAddress: fullAddress,\r\n      city: city,\r\n      district: district,\r\n      street: street,\r\n      postalCode: postalCode,\r\n      contactNumber: contactNumber,\r\n    });\r\n  };\r\n  useEffect(() => {\r\n    if (shippingAddress) {\r\n      localStorage.setItem(\"shippingAddress\", JSON.stringify(shippingAddress));\r\n      navigate(\"/overview\");\r\n    }\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <Container style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n        <ListGroup>\r\n          <ListGroupItem>\r\n            <StepChecker signIn shippingAddress />\r\n          </ListGroupItem>\r\n        </ListGroup>\r\n      </Container>\r\n\r\n      <Card\r\n        style={{ width: \"27rem\", height: \"78vh\" }}\r\n        className=\"m-auto p-3 rounded\"\r\n      >\r\n        <span className=\"head mb-2 \">SHIPPING ADDRESS</span>\r\n        {!localStorage.getItem(\"user\") ? (\r\n          navigate(\"/users/login?redirect=address\")\r\n        ) : (\r\n          <Card.Body className=\"Login pb-0\" style={{ paddingTop: \"2rem\" }}>\r\n            <Form onSubmit={handleOrder}>\r\n              <Form.Group size=\"lg\" controlId=\"city\">\r\n                <Form.Label>City</Form.Label>\r\n                <Form.Control\r\n                  autoFocus\r\n                  type=\"city\"\r\n                  value={city}\r\n                  required\r\n                  onChange={(e) => setCity(e.target.value)}\r\n                />\r\n              </Form.Group>\r\n              <Form.Group size=\"lg\" controlId=\"district\" className=\"mt-3\">\r\n                <Form.Label>District</Form.Label>\r\n                <Form.Control\r\n                  type=\"district\"\r\n                  value={district}\r\n                  required\r\n                  onChange={(e) => setDistrict(e.target.value)}\r\n                />\r\n              </Form.Group>\r\n              <Form.Group size=\"lg\" controlId=\"street\" className=\"mt-3\">\r\n                <Form.Label>Street</Form.Label>\r\n                <Form.Control\r\n                  type=\"street\"\r\n                  value={street}\r\n                  required\r\n                  onChange={(e) => setStreet(e.target.value)}\r\n                />\r\n              </Form.Group>\r\n              <Form.Group size=\"lg\" controlId=\"postalCode\" className=\"mt-3\">\r\n                <Form.Label>Postal Code</Form.Label>\r\n                <Form.Control\r\n                  type=\"postalCode\"\r\n                  value={postalCode}\r\n                  required\r\n                  onChange={(e) => setPostalCode(e.target.value)}\r\n                />\r\n              </Form.Group>\r\n              <Form.Group size=\"lg\" controlId=\"fullAddress\" className=\"mt-3\">\r\n                <Form.Label>Detailed Address</Form.Label>\r\n                <Form.Control\r\n                  as=\"textarea\"\r\n                  rows={3}\r\n                  placeholder=\"Detailed address with building name, floor, door number\"\r\n                  type=\"fullAddress\"\r\n                  value={fullAddress}\r\n                  required\r\n                  onChange={(e) => setFullAddress(e.target.value)}\r\n                />\r\n              </Form.Group>\r\n              <Form.Group size=\"lg\" controlId=\"fullAddress\" className=\"mt-3\">\r\n                <Form.Label>Contact Number</Form.Label>\r\n                <Form.Control\r\n                  type=\"contactNumber\"\r\n                  value={contactNumber}\r\n                  required\r\n                  onChange={(e) => setContactNumber(e.target.value)}\r\n                />\r\n              </Form.Group>\r\n              <div className=\"d-grid gap-2\">\r\n                <Button variant=\"secondary\" size=\"lg\" type=\"submit\">\r\n                  Continue\r\n                </Button>\r\n              </div>\r\n            </Form>\r\n          </Card.Body>\r\n        )}\r\n      </Card>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ShippingAddressScreen;\r\n","C:\\Users\\Lutfi\\Desktop\\Project\\Graduation_Project\\frontend\\src\\screens\\CheckOutScreen.js",["103","104"],[],"import React, { useState, useEffect } from \"react\";\r\nimport { useNavigate, useParams, Link } from \"react-router-dom\";\r\nimport {\r\n  Card,\r\n  ListGroup,\r\n  Container,\r\n  ListGroupItem,\r\n  Form,\r\n  Button,\r\n  Alert,\r\n  Nav,\r\n} from \"react-bootstrap\";\r\nimport StepChecker from \"../components/StepChecker\";\r\nimport { loadStripe } from \"@stripe/stripe-js\";\r\nimport { Elements, CardElement } from \"@stripe/react-stripe-js\";\r\n\r\nimport axios from \"axios\";\r\n\r\nconst stripePromise = loadStripe(`${process.env.STRIPE_PUBLISHABLE_KEY}`);\r\nconst CheckOutScreen = () => {\r\n  const orderId = useParams();\r\n  const navigate = useNavigate();\r\n  const userInfo = JSON.parse(localStorage.getItem(\"user\"));\r\n  const paymentMethod = JSON.parse(localStorage.getItem(\"paymentMethod\"));\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n\r\n  const cardElementOptions = {\r\n    style: {\r\n      base: {\r\n        fontSize: \"20px\",\r\n\r\n        fontWeight: \"500\",\r\n        fontFamily: \"Montserrat\",\r\n        \"::placeholder\": {\r\n          color: \"#87bbfd \",\r\n        },\r\n      },\r\n      invalid: {},\r\n    },\r\n    hidePostalCode: true,\r\n  };\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n    let config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        authorization: `Bearer ${userInfo.token}`,\r\n      },\r\n    };\r\n    let data = {};\r\n    const { data: client_secret } = await axios.put(\r\n      `/api/orders/${orderId.id}`,\r\n      data,\r\n      config\r\n    );\r\n    console.log(client_secret);\r\n    if (client_secret) {\r\n      setIsProcessing(true);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (paymentMethod === \"Cash\") {\r\n      setTimeout(() => {\r\n        navigate(\"/users/profile\");\r\n      }, 4000);\r\n    }\r\n  }, []);\r\n  return (\r\n    <>\r\n      <Container style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n        <ListGroup>\r\n          <ListGroupItem>\r\n            <StepChecker signIn shippingAddress overview payment />\r\n          </ListGroupItem>\r\n        </ListGroup>\r\n      </Container>\r\n\r\n      <Card\r\n        style={{ width: \"40%\", height: \"30vh\" }}\r\n        className=\"m-auto p-3 rounded\"\r\n      >\r\n        {paymentMethod === \"Cash\" ? (\r\n          <Card.Body>\r\n            <Alert variant={\"success\"}>Order Confirmed</Alert>\r\n            <Form onSubmit={handleSubmit}>\r\n              <ListGroup>\r\n                <ListGroupItem>\r\n                  <Card.Text>Order ID: {orderId.id}</Card.Text>\r\n                </ListGroupItem>\r\n                <ListGroupItem\r\n                  style={{ display: \"flex\", justifyContent: \"center\" }}\r\n                >\r\n                  <Button type=\"submit\">Check My Orders</Button>\r\n                </ListGroupItem>\r\n              </ListGroup>\r\n            </Form>\r\n          </Card.Body>\r\n        ) : (\r\n          <>\r\n            {!isProcessing === true ? (\r\n              <Card.Body>\r\n                <Alert variant={\"danger\"}>Not Paid</Alert>\r\n                <Form onSubmit={handleSubmit}>\r\n                  <ListGroup>\r\n                    <ListGroupItem>\r\n                      <Card.Text>Order ID: {orderId.id}</Card.Text>\r\n                    </ListGroupItem>\r\n                    <ListGroupItem>\r\n                      <Elements stripe={stripePromise}>\r\n                        <CardElement options={cardElementOptions} />\r\n                      </Elements>\r\n                    </ListGroupItem>\r\n                    <ListGroupItem\r\n                      style={{ display: \"flex\", justifyContent: \"center\" }}\r\n                    >\r\n                      <Button type=\"submit\">Pay</Button>\r\n                    </ListGroupItem>\r\n                  </ListGroup>\r\n                </Form>\r\n              </Card.Body>\r\n            ) : (\r\n              <Card.Body>\r\n                <Alert variant={\"success\"}>Order Confirmed</Alert>\r\n                <Form onSubmit={handleSubmit}>\r\n                  <ListGroup>\r\n                    <ListGroupItem>\r\n                      <Card.Text>Order ID: {orderId.id}</Card.Text>\r\n                    </ListGroupItem>\r\n                    <ListGroupItem\r\n                      style={{ display: \"flex\", justifyContent: \"center\" }}\r\n                    >\r\n                      <Link to=\"/users/profile\">\r\n                        <Button>Check My Orders</Button>\r\n                      </Link>\r\n                    </ListGroupItem>\r\n                  </ListGroup>\r\n                </Form>\r\n              </Card.Body>\r\n            )}\r\n          </>\r\n        )}\r\n      </Card>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CheckOutScreen;\r\n","C:\\Users\\Lutfi\\Desktop\\Project\\Graduation_Project\\frontend\\src\\screens\\OrderDetailScreen.js",["105"],[],{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","severity":1,"message":"111","line":40,"column":20,"nodeType":"112","messageId":"113","endLine":40,"endColumn":31},{"ruleId":"114","severity":1,"message":"115","line":56,"column":6,"nodeType":"116","endLine":56,"endColumn":53,"suggestions":"117"},{"ruleId":"110","severity":1,"message":"118","line":21,"column":10,"nodeType":"112","messageId":"113","endLine":21,"endColumn":15},{"ruleId":"114","severity":1,"message":"119","line":76,"column":6,"nodeType":"116","endLine":76,"endColumn":17,"suggestions":"120"},{"ruleId":"110","severity":1,"message":"121","line":6,"column":3,"nodeType":"112","messageId":"113","endLine":6,"endColumn":8},{"ruleId":"110","severity":1,"message":"122","line":11,"column":3,"nodeType":"112","messageId":"113","endLine":11,"endColumn":6},{"ruleId":"114","severity":1,"message":"123","line":68,"column":6,"nodeType":"116","endLine":68,"endColumn":8,"suggestions":"124"},{"ruleId":"114","severity":1,"message":"125","line":33,"column":6,"nodeType":"116","endLine":33,"endColumn":8,"suggestions":"126"},"no-native-reassign",["127"],"no-negated-in-lhs",["128"],"no-unused-vars","'setUserData' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'fetchOrders' and 'orders'. Either include them or remove the dependency array.","ArrayExpression",["129"],"'order' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'navigate' and 'userInfo.token'. Either include them or remove the dependency array.",["130"],"'Alert' is defined but never used.","'Nav' is defined but never used.","React Hook useEffect has missing dependencies: 'navigate' and 'paymentMethod'. Either include them or remove the dependency array.",["131"],"React Hook useEffect has missing dependencies: 'order', 'orderId.id', and 'userInfo.token'. Either include them or remove the dependency array.",["132"],"no-global-assign","no-unsafe-negation",{"desc":"133","fix":"134"},{"desc":"135","fix":"136"},{"desc":"137","fix":"138"},{"desc":"139","fix":"140"},"Update the dependencies array to be: [userData.token, userData.name, userData.email, fetchOrders, orders]",{"range":"141","text":"142"},"Update the dependencies array to be: [isSuccess, navigate, userInfo.token]",{"range":"143","text":"144"},"Update the dependencies array to be: [navigate, paymentMethod]",{"range":"145","text":"146"},"Update the dependencies array to be: [order, orderId.id, userInfo.token]",{"range":"147","text":"148"},[1615,1662],"[userData.token, userData.name, userData.email, fetchOrders, orders]",[2146,2157],"[isSuccess, navigate, userInfo.token]",[1743,1745],"[navigate, paymentMethod]",[1044,1046],"[order, orderId.id, userInfo.token]"]